package com.amazonaws.sfc.canbus.jna;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;
/**
 * Structure describing a generic socket address.<br>
 * This file was autogenerated by <a href="https://github.com/nativelibs4java/JNAerator">JNAerator</a> */
@SuppressWarnings({"unused", "SpellCheckingInspection"})
public class sockaddr extends Structure {
	/**
	 * Common data: address family and length.<br>
	 * C type : sa_family_t
	 */
	public short sa_family;
	/**
	 * Address data.<br>
	 * C type : char[14]
	 */
	public byte[] sa_data = new byte[14];
	public sockaddr() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("sa_family", "sa_data");
	}
	
	public sockaddr(Pointer ptr) {
	    super(ptr);
	}
	
	/**
	 * @param sa_family Common data: address family and length.<br>
	 * C type : sa_family_t<br>
	 * @param sa_data Address data.<br>
	 * C type : char[14]
	 */
	public sockaddr(short sa_family, byte sa_data[]) {
		super();
		this.sa_family = sa_family;
		if ((sa_data.length != this.sa_data.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.sa_data = sa_data;
	}
	public static class ByReference extends sockaddr implements Structure.ByReference {
		
	};
	public static class ByValue extends sockaddr implements Structure.ByValue {
		
	};
}
